import tensorflow as tf
import numpy as np
from tensorflow.python.keras import backend as k
eps = 1e-6


class PRelu(tf.keras.layers.Layer):
    def __init__(self):
        super(PRelu, self).__init__()
        self.alpha = None

    def build(self, input_shape):
        self.alpha = tf.Variable(tf.ones([1, 1, 1])*0.1)

    def call(self, inputs, **kwargs):
        pos = tf.nn.relu(inputs)
        inv = inputs - pos
        return pos - inv * self.alpha


class GLN(tf.keras.Model):
    def __init__(self):
        super(GLN, self).__init__()
        self.ndim = None
        self.gamma = None
        self.beta = None

    def build(self, input_shape):
        chs = input_shape[-1]
        self.gamma = self.add_variable(name="gamma",
                                       shape=[1, 1, chs],
                                       initializer=tf.keras.initializers.Ones(),
                                       trainable=True)
        self.beta = self.add_variable(name="beta",
                                      shape=[1, 1, chs],
                                      initializer=tf.keras.initializers.Zeros(),
                                      trainable=True)

    def call(self, inputs, training=None, mask=None):
        mean, var = tf.nn.moments(inputs, keep_dims=True, axes=[1, 2])
        inputs = (inputs - mean) / k.sqrt(var + eps) * self.gamma + self.beta
        return inputs


class DepthwiseConv1D(tf.keras.Model):
    def __init__(self,
                 kernel_size,
                 dilation):
        super(DepthwiseConv1D, self).__init__()
        self.kernel_size = kernel_size
        self.dilation = dilation
        self.depthwise_conv = tf.keras.layers.DepthwiseConv2D((kernel_size, 1),
                                                              dilation_rate=dilation,
                                                              activation=None,
                                                              use_bias=True,
                                                              padding="same")

    def call(self, inputs, training=None, mask=None):
        inputs = inputs[:, :, tf.newaxis, :]
        inputs = self.depthwise_conv(inputs)
        return inputs[:, :, 0]


class Encoder(tf.keras.Model):
    def __init__(self, kernel_size, out_channels=256):
        super(Encoder, self).__init__()
        self.conv = tf.keras.layers.Conv1D(kernel_size=kernel_size, filters=out_channels, use_bias=False,
                                           strides=kernel_size//2, padding="same")

    def call(self, inputs, training=None, mask=None):
        """
        input_shape = [Bs, samplepts, chs~1 or not]
        """
        inputs = self.conv(inputs)
        return inputs


class Decoder(tf.keras.Model):
    def __init__(self, kernel_size=2, num_speakers=1):
        super(Decoder, self).__init__()
        self.conv = tf.keras.layers.Conv2DTranspose(kernel_size=(kernel_size, 1), filters=num_speakers, use_bias=False,
                                                    strides=(kernel_size//2, 1), padding="same")

    def call(self, inputs, training=None, mask=None):
        """
        input_shape = [Bs, samplepts//stride, channels]
        output_shape = [Bs, samplepts, spk]
        """
        inputs = inputs[:, :, tf.newaxis, :]
        inputs = self.conv(inputs)
        return tf.squeeze(inputs)


class Bottleneck(tf.keras.Model):
    def __init__(self,
                 input_channel,
                 hidden_channel,
                 skip_channel,
                 kernel_size=3,
                 dilation=1):
        super(Bottleneck, self).__init__()
        self.model = tf.keras.Sequential([])
        self.model.add(tf.keras.layers.Conv1D(filters=hidden_channel, kernel_size=1))
        self.model.add(PRelu())
        self.model.add(GLN())
        self.model.add(DepthwiseConv1D(kernel_size=kernel_size, dilation=dilation))
        self.model.add(PRelu())
        self.model.add(GLN())
        self.conv_skip = tf.keras.layers.Conv1D(filters=skip_channel, kernel_size=1)
        self.conv_res = tf.keras.layers.Conv1D(filters=input_channel, kernel_size=1)

    def call(self, inputs, training=None, mask=None):
        inputs = self.model(inputs)
        skip = self.conv_skip(inputs)
        res = self.conv_res(inputs)

        return res, skip


class TCNBlock(tf.keras.Model):
    def __init__(self, input_channel, hidden_channel, skip_channel, local_layers, repeat_number):
        super(TCNBlock, self).__init__()
        self.model_list = []
        self.global_dense = tf.keras.layers.Dense(units=repeat_number*local_layers*4)
        self.weight_dense = tf.keras.layers.Dense(units=repeat_number*local_layers, activation="relu")
        for r in range(repeat_number):
            for i in range(local_layers):
                self.model_list.append(Bottleneck(input_channel=input_channel,
                                                  hidden_channel=hidden_channel,
                                                  skip_channel=skip_channel,
                                                  dilation=2**i))

    def call(self, inputs, training=None, mask=None):
        skip_accumulate = []
        for local_model in self.model_list:
            res, skip = local_model(inputs)
            inputs += res
            skip_accumulate.append(skip)
        skip_accumulate = tf.cast(skip_accumulate, tf.float32)
        weight = k.mean(skip_accumulate, axis=[2, 3])
        weight = tf.transpose(weight, [1, 0])
        weight = tf.keras.activations.hard_sigmoid(self.weight_dense(self.global_dense(weight)))[..., tf.newaxis, tf.newaxis]
        skip_accumulate *= (tf.transpose(weight, [1, 0, 2, 3]))
        return k.sum(skip_accumulate, axis=0)


class CTNV2(tf.keras.Model):
    def __init__(self, feature_channel, hidden_channel, skip_channel, local_layers, repeat_number,
                 num_spks=2, enc_channels=512):
        super(CTNV2, self).__init__()
        self.spk = num_spks
        self.norm = GLN()
        self.conv1d = tf.keras.layers.Conv1D(filters=feature_channel, kernel_size=1, use_bias=True)
        self.TCN = TCNBlock(input_channel=feature_channel, hidden_channel=hidden_channel, skip_channel=skip_channel,
                            local_layers=local_layers, repeat_number=repeat_number)
        self.prelu = PRelu()
        self.spk_channelexpand = tf.keras.layers.Conv1D(filters=enc_channels*num_spks,
                                                        kernel_size=1, use_bias=True)  # This is the decision layer
        # TODO Add attention 2 it
        """self.spk_channelexpand = SepQueryNonlocalBlock(hiddensize=hidden_channel,
                                                       enc_channels=enc_channels, spk_num=num_spks)"""

    def call(self, inputs, training=None, mask=None):
        inputs = self.norm(inputs)
        inputs = self.conv1d(inputs)
        skip = self.TCN(inputs)
        inputs = self.prelu(skip)
        inputs = self.spk_channelexpand(inputs)
        inputs = tf.nn.sigmoid(inputs)
        return inputs


class Model(tf.keras.Model):
    def __init__(self,
                 kernel_size,
                 feature_channel, hidden_channel, skip_channel, local_layers, repeat_number,
                 num_spks=2, enc_channels=512):
        super(Model, self).__init__()
        self.spk = num_spks
        self.enc = Encoder(kernel_size=kernel_size, out_channels=enc_channels)
        self.dec = Decoder(kernel_size=kernel_size)
        self.sepration = CTNV2(feature_channel=feature_channel, hidden_channel=hidden_channel, skip_channel=skip_channel,
                               local_layers=local_layers, repeat_number=repeat_number, num_spks=num_spks)

    def call(self, inputs, training=None, mask=None):
        e = self.enc(inputs)
        s = self.sepration(e)
        s = tf.split(s, self.spk, axis=-1)
        s = tf.cast(s, tf.float32)
        separator = e[tf.newaxis] * s
        spk, bs, L, Chs = separator.get_shape().as_list()
        separator = tf.reshape(separator, [spk*bs, L, Chs])
        audios = self.dec(separator)
        audios = tf.reshape(audios, [spk, bs, -1])
        return tf.transpose(audios, [1, 0, 2])


if __name__ == '__main__':
    tf.enable_eager_execution()
    test_inputs = np.random.normal(size=[1, 16384, 1])
    test_inputs = tf.cast(test_inputs, tf.float32)
    Model_basic = Model(kernel_size=40, enc_channels=512, feature_channel=128, hidden_channel=512, skip_channel=128,
                        local_layers=7, repeat_number=2, num_spks=2)
    data = Model_basic(test_inputs)
    Model_basic.summary()

